{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"OneHundredDoors.java:43: error: cannot find symbol\n        toogleDoor(amountOfDoorsPassed);\n        ^\n  symbol:   method toogleDoor(int)\n  location: class OneHundredDoors\nOneHundredDoors.java:44: error: cannot find symbol\n        return convertDoorListToIdsOfOpenedDoors();\n               ^\n  symbol:   method convertDoorListToIdsOfOpenedDoors()\n  location: class OneHundredDoors\n2 errors\n","instructions":"100 doors in a row are all initially closed. You make\n100 passes by the doors. The first time through, you\nvisit every door and toggle the door (if the door is\nclosed, you open it; if it is open, you close it).\nThe second time you only visit every 2nd door (door\n#2, #4, #6, ...). The third time, every 3rd door\n(door #3, #6, #9, ...), etc, until you only visit\nthe 100th door.\n\nQuestion: What state are the doors in after the last\npass? Which are open, which are closed?\n\n[Source http://rosettacode.org]","OneHundredDoors.java":"import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class OneHundredDoors {\n\n    List<String> doors = new ArrayList<String>(Arrays.asList(\n        \"C\", \n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n        \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\"\n        ));\n\n    public List<String> statesOfDoorsAfterPassingDoors(int amountOfDoorsPassed) {\n        \n        toggleDoor(amountOfDoorsPassed);\n\n        return doors.subList(1, amountOfDoorsPassed + 1);\n    }\n\n    private void toggleDoor(int amountOfDoorsPassed) {\n        for (int pass = 1; pass <= amountOfDoorsPassed; pass++) {\n            for (int door = 1; door <= amountOfDoorsPassed; door++) {\n                if (door % pass == 0) {\n                    if (\"C\".equals(doors.get(door))){ \n                        doors.set(door, \"O\");\n                    } else if (\"O\".equals(doors.get(door))) {\n                        doors.set(door, \"C\");\n                    }\n                }\n            }\n        }\n    }\n\n    public String idsOfOpenedDoorsAfterPassingDoors(int amountOfDoorsPassed) {\n        toogleDoor(amountOfDoorsPassed);\n        return convertDoorListToIdsOfOpenedDoors();\n    }\n}\n","OneHundredDoorsTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class OneHundredDoorsTest {\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_door_should_be_Open_if_only_passing_1_door() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new String[]{\"O\"}, oneHundredDoors.statesOfDoorsAfterPassingDoors(1).toArray());\n    }\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_doors_should_be_OpenClosed_respectively_if_only_passing_2_doors() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new String[]{\"O\", \"C\"}, oneHundredDoors.statesOfDoorsAfterPassingDoors(2).toArray());\n    }\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_doors_should_be_OpenClosedClosed_respectively_if_only_passing_3_doors() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(new String[]{\"O\", \"C\", \"C\"}, oneHundredDoors.statesOfDoorsAfterPassingDoors(3).toArray());\n    }\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_doors_should_be_right_if_passing_100_doors() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertArrayEquals(\n            new String[]{\n                \"O\", \"C\", \"C\", \"O\", \"C\", \"C\", \"C\", \"C\", \"O\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"C\", \"O\", \"C\", \"C\", \"C\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"O\", \"C\", \"C\", \"C\", \"C\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"C\", \"O\", \"C\", \"C\", \"C\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"O\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n                \"C\", \"C\", \"C\", \"O\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n                \"O\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\",\n                \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"O\"\n            }, oneHundredDoors.statesOfDoorsAfterPassingDoors(100).toArray());\n    }\n\n    @Test\n    public void after_the_last_pass_the_door_ids_of_the_opened_doors_should_be_1_4_9_16_25_36_49_64_81_100_if_passing_100_doors() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertEquals(\"1-4-9-16-25-36-49-64-81-100\", oneHundredDoors.idsOfOpenedDoorsAfterPassingDoors(100));\n    }\n}\n\n\n"}