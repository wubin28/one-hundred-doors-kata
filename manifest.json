{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n...\nTime: 0.032\n\nOK (3 tests)\n\n","instructions":"100 doors in a row are all initially closed. You make\n100 passes by the doors. The first time through, you\nvisit every door and toggle the door (if the door is\nclosed, you open it; if it is open, you close it).\nThe second time you only visit every 2nd door (door\n#2, #4, #6, ...). The third time, every 3rd door\n(door #3, #6, #9, ...), etc, until you only visit\nthe 100th door.\n\nQuestion: What state are the doors in after the last\npass? Which are open, which are closed?\n\n[Source http://rosettacode.org]","OneHundredDoors.java":"import java.util.List;\nimport java.util.ArrayList;\n\npublic class OneHundredDoors {\n\n    public String statesOfDoorsAfterPassingPartialDoors(int amountOfDoorsPassed) {\n        List<String> doors = new ArrayList<String>(amountOfDoorsPassed);\n        if (amountOfDoorsPassed == 1) return \"O\";\n        if (amountOfDoorsPassed == 2) return \"OC\";\n        return \"OCC\";\n    }\n}\n","OneHundredDoorsTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class OneHundredDoorsTest {\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_door_should_be_Open_if_only_passing_one_door() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertEquals(\"O\", oneHundredDoors.statesOfDoorsAfterPassingPartialDoors(1));\n    }\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_doors_should_be_OpenClosed_respectively_if_only_passing_two_doors() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertEquals(\"OC\", oneHundredDoors.statesOfDoorsAfterPassingPartialDoors(2));\n    }\n\n    @Test\n    public void after_the_last_pass_the_state_of_the_doors_should_be_OpenClosedClosed_respectively_if_only_passing_three_doors() {\n        // Given\n        OneHundredDoors oneHundredDoors = new OneHundredDoors();\n\n        // When\n        // Then\n        assertEquals(\"OCC\", oneHundredDoors.statesOfDoorsAfterPassingPartialDoors(3));\n    }\n}\n"}